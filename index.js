/**
 * Punto de entrada principal de la aplicaci√≥n
 * Inicializa el servidor y los servicios
 */

const { config, validateConfig, printConfig } = require('./src/config/env');
const { startServer } = require('./src/app');
const { logOperations } = require('./src/utils/logger');
const scheduledService = require('./src/services/scheduledService');

/**
 * Funci√≥n principal para inicializar la aplicaci√≥n
 */
async function main() {
  try {
    console.log('üîß Iniciando Excel-VTEX Service...\n');

    // 1. Validar configuraci√≥n
    console.log('üîç Validando configuraci√≥n...');
    if (!validateConfig()) {
      console.error('‚ùå Error en la configuraci√≥n. Abortando inicio.');
      process.exit(1);
    }
    console.log('‚úÖ Configuraci√≥n v√°lida\n');

    // 2. Mostrar configuraci√≥n
    printConfig();
    console.log('');

    // 3. Inicializar el servidor Express
    console.log('üåê Iniciando servidor HTTP...');
    const server = startServer();
    
    // 4. Inicializar el servicio programado (cron job)
    console.log('‚è∞ Iniciando servicio programado...');
    await scheduledService.start();
    
    console.log('‚úÖ Aplicaci√≥n iniciada correctamente\n');
    console.log('üìã Endpoints disponibles:');
    console.log(`   GET  /health           - Estado del servidor`);
    console.log(`   GET  /api/status       - Estado del √∫ltimo proceso`);
    console.log(`   POST /api/force-update - Forzar actualizaci√≥n manual`);
    console.log(`   GET  /api/logs         - Ver estad√≠sticas de logs`);
    console.log('');

    logOperations.api.info('Aplicaci√≥n iniciada correctamente');

    // 5. Manejar se√±ales de cierre
    process.on('SIGTERM', async () => {
      console.log('\nüõë Recibida se√±al SIGTERM...');
      await gracefulShutdown(server);
    });

    process.on('SIGINT', async () => {
      console.log('\nüõë Recibida se√±al SIGINT...');
      await gracefulShutdown(server);
    });

  } catch (error) {
    console.error('‚ùå Error al iniciar la aplicaci√≥n:', error.message);
    logOperations.api.error('Error al iniciar la aplicaci√≥n', error);
    process.exit(1);
  }
}

/**
 * Funci√≥n para cerrar la aplicaci√≥n de manera graceful
 */
async function gracefulShutdown(server) {
  try {
    console.log('üîÑ Iniciando cierre graceful...');
    
    // Detener el servicio programado
    await scheduledService.stop();
    console.log('‚úÖ Servicio programado detenido');
    
    // Cerrar el servidor HTTP
    server.close(() => {
      console.log('‚úÖ Servidor HTTP cerrado');
      console.log('üëã Aplicaci√≥n cerrada correctamente');
      process.exit(0);
    });

    // Timeout de seguridad
    setTimeout(() => {
      console.error('‚ùå Timeout alcanzado. Forzando cierre...');
      process.exit(1);
    }, 10000);

  } catch (error) {
    console.error('‚ùå Error durante el cierre:', error.message);
    process.exit(1);
  }
}

// Iniciar la aplicaci√≥n
if (require.main === module) {
  main();
}

module.exports = { main };